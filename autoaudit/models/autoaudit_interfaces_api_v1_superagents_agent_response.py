# coding: utf-8

"""
    AutoAudit API

    API for AutoAudit

    The version of the OpenAPI document: 1.0.0
    Contact: support@autoaudit.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from autoaudit.models.agent_capability_response import AgentCapabilityResponse
from autoaudit.models.agent_tool_response import AgentToolResponse
from typing import Optional, Set
from typing_extensions import Self

class AutoauditInterfacesApiV1SuperagentsAgentResponse(BaseModel):
    """
    Response model for agent details
    """ # noqa: E501
    id: StrictStr
    name: StrictStr
    description: StrictStr
    capabilities: List[AgentCapabilityResponse]
    tools: Optional[List[AgentToolResponse]] = None
    llm_id: Optional[StrictStr] = None
    organization_id: StrictStr
    creator_id: StrictStr
    status: StrictStr
    execution_tier: StrictStr
    max_iterations: StrictInt
    created_at: Optional[StrictStr] = None
    updated_at: Optional[StrictStr] = None
    last_execution_at: Optional[StrictStr] = None
    execution_count: Optional[StrictInt] = 0
    metadata: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["id", "name", "description", "capabilities", "tools", "llm_id", "organization_id", "creator_id", "status", "execution_tier", "max_iterations", "created_at", "updated_at", "last_execution_at", "execution_count", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AutoauditInterfacesApiV1SuperagentsAgentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in capabilities (list)
        _items = []
        if self.capabilities:
            for _item_capabilities in self.capabilities:
                if _item_capabilities:
                    _items.append(_item_capabilities.to_dict())
            _dict['capabilities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tools (list)
        _items = []
        if self.tools:
            for _item_tools in self.tools:
                if _item_tools:
                    _items.append(_item_tools.to_dict())
            _dict['tools'] = _items
        # set to None if tools (nullable) is None
        # and model_fields_set contains the field
        if self.tools is None and "tools" in self.model_fields_set:
            _dict['tools'] = None

        # set to None if llm_id (nullable) is None
        # and model_fields_set contains the field
        if self.llm_id is None and "llm_id" in self.model_fields_set:
            _dict['llm_id'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        # set to None if last_execution_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_execution_at is None and "last_execution_at" in self.model_fields_set:
            _dict['last_execution_at'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AutoauditInterfacesApiV1SuperagentsAgentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "capabilities": [AgentCapabilityResponse.from_dict(_item) for _item in obj["capabilities"]] if obj.get("capabilities") is not None else None,
            "tools": [AgentToolResponse.from_dict(_item) for _item in obj["tools"]] if obj.get("tools") is not None else None,
            "llm_id": obj.get("llm_id"),
            "organization_id": obj.get("organization_id"),
            "creator_id": obj.get("creator_id"),
            "status": obj.get("status"),
            "execution_tier": obj.get("execution_tier"),
            "max_iterations": obj.get("max_iterations"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "last_execution_at": obj.get("last_execution_at"),
            "execution_count": obj.get("execution_count") if obj.get("execution_count") is not None else 0,
            "metadata": obj.get("metadata")
        })
        return _obj


