# coding: utf-8

"""
    AutoAudit API

    API for AutoAudit

    The version of the OpenAPI document: 1.0.0
    Contact: support@autoaudit.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DocumentMetadataResponse(BaseModel):
    """
    Response model for document metadata
    """ # noqa: E501
    document_type: Optional[StrictStr] = None
    main_topics: Optional[List[StrictStr]] = None
    created_date: Optional[StrictStr] = None
    document_category: Optional[StrictStr] = None
    has_tables: Optional[StrictBool] = None
    extracted_data: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["document_type", "main_topics", "created_date", "document_category", "has_tables", "extracted_data"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocumentMetadataResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if document_type (nullable) is None
        # and model_fields_set contains the field
        if self.document_type is None and "document_type" in self.model_fields_set:
            _dict['document_type'] = None

        # set to None if main_topics (nullable) is None
        # and model_fields_set contains the field
        if self.main_topics is None and "main_topics" in self.model_fields_set:
            _dict['main_topics'] = None

        # set to None if created_date (nullable) is None
        # and model_fields_set contains the field
        if self.created_date is None and "created_date" in self.model_fields_set:
            _dict['created_date'] = None

        # set to None if document_category (nullable) is None
        # and model_fields_set contains the field
        if self.document_category is None and "document_category" in self.model_fields_set:
            _dict['document_category'] = None

        # set to None if has_tables (nullable) is None
        # and model_fields_set contains the field
        if self.has_tables is None and "has_tables" in self.model_fields_set:
            _dict['has_tables'] = None

        # set to None if extracted_data (nullable) is None
        # and model_fields_set contains the field
        if self.extracted_data is None and "extracted_data" in self.model_fields_set:
            _dict['extracted_data'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocumentMetadataResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "document_type": obj.get("document_type"),
            "main_topics": obj.get("main_topics"),
            "created_date": obj.get("created_date"),
            "document_category": obj.get("document_category"),
            "has_tables": obj.get("has_tables"),
            "extracted_data": obj.get("extracted_data")
        })
        return _obj


