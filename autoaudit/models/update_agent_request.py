# coding: utf-8

"""
    AutoAudit API

    API for AutoAudit

    The version of the OpenAPI document: 1.0.0
    Contact: support@autoaudit.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from autoaudit.models.agent_capability_request import AgentCapabilityRequest
from autoaudit.models.agent_status import AgentStatus
from autoaudit.models.agent_tool_request import AgentToolRequest
from typing import Optional, Set
from typing_extensions import Self

class UpdateAgentRequest(BaseModel):
    """
    Request model for updating an agent
    """ # noqa: E501
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    capabilities: Optional[List[AgentCapabilityRequest]] = None
    tools: Optional[List[AgentToolRequest]] = None
    llm_id: Optional[StrictStr] = None
    metadata: Optional[Dict[str, Any]] = None
    execution_tier: Optional[StrictStr] = None
    max_iterations: Optional[StrictInt] = None
    status: Optional[AgentStatus] = None
    __properties: ClassVar[List[str]] = ["name", "description", "capabilities", "tools", "llm_id", "metadata", "execution_tier", "max_iterations", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateAgentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in capabilities (list)
        _items = []
        if self.capabilities:
            for _item_capabilities in self.capabilities:
                if _item_capabilities:
                    _items.append(_item_capabilities.to_dict())
            _dict['capabilities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tools (list)
        _items = []
        if self.tools:
            for _item_tools in self.tools:
                if _item_tools:
                    _items.append(_item_tools.to_dict())
            _dict['tools'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if capabilities (nullable) is None
        # and model_fields_set contains the field
        if self.capabilities is None and "capabilities" in self.model_fields_set:
            _dict['capabilities'] = None

        # set to None if tools (nullable) is None
        # and model_fields_set contains the field
        if self.tools is None and "tools" in self.model_fields_set:
            _dict['tools'] = None

        # set to None if llm_id (nullable) is None
        # and model_fields_set contains the field
        if self.llm_id is None and "llm_id" in self.model_fields_set:
            _dict['llm_id'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if execution_tier (nullable) is None
        # and model_fields_set contains the field
        if self.execution_tier is None and "execution_tier" in self.model_fields_set:
            _dict['execution_tier'] = None

        # set to None if max_iterations (nullable) is None
        # and model_fields_set contains the field
        if self.max_iterations is None and "max_iterations" in self.model_fields_set:
            _dict['max_iterations'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateAgentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "capabilities": [AgentCapabilityRequest.from_dict(_item) for _item in obj["capabilities"]] if obj.get("capabilities") is not None else None,
            "tools": [AgentToolRequest.from_dict(_item) for _item in obj["tools"]] if obj.get("tools") is not None else None,
            "llm_id": obj.get("llm_id"),
            "metadata": obj.get("metadata"),
            "execution_tier": obj.get("execution_tier"),
            "max_iterations": obj.get("max_iterations"),
            "status": obj.get("status")
        })
        return _obj


